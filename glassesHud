os.loadAPI("M3C/utils")
os.loadAPI("M3C/kvApi")

local glasses = utils.findAndWrap("openperipheral_bridge")
local boxBgColor = 0xFFFFFF
local boxTextColor = 0xF5F5F5

function drawBox(height)
  glasses.addBox(1, 1, 128, height, boxBgColor, .2)
end

function display(text)
  glasses.clear()
  local yPos = 5
  for index,line in utils.orderTable(text) do
    glasses.addText(5, yPos, index .. ": " .. line, boxTextColor)
    yPos = yPos + 10
  end
  glasses.addText(5, yPos, "Updated: " .. os.time(), boxTextColor)
  yPos = yPos + 10
  drawBox(yPos)
  glasses.sync()
end

--Convert ME Display Bytes to smaller units
function convertMEBytes(bytes)
  local byteLength = string.len(bytes)
  local postfix = "B"

  if byteLength > 3 and byteLength <= 6 then
    postfix = "KB"
    bytes = bytes / 1000
  elseif byteLength > 6 and byteLength <= 9 then
    postfix = "MB"
    bytes = bytes / 1000000
  elseif byteLength > 9 and byteLength <= 12 then
    postfix = "GB"
    bytes = bytes / 1000000000
  end

  return utils.round(bytes, 1) .. postfix
end

kvApi.initializeWirelessModems()

while true do
  local powerStatus = kvApi.deserializeKvResponse(kvApi.clientGet("powerStatus"))
  local meStatus = kvApi.deserializeKvResponse(kvApi.clientGet("meStatus"))
  local reactor = kvApi.deserializeKvResponse(kvApi.clientGet("reactorStatus"))

  local displayText={
    ["Power"] = utils.formatInt(powerStatus.Available) .. "%",
    ["ME Slots"] = utils.formatInt(meStatus.usedSlots) .. "/" .. utils.formatInt(meStatus.totalSlots),
    ["ME Bytes"] = convertMEBytes(meStatus.usedBytes) .. "/" .. convertMEBytes(meStatus.totalBytes),
    ["Blutonium"] = utils.formatInt(reactor.Blutonium),
    ["Yellorium"] = utils.formatInt(reactor.Yellorium)
  }

  display(displayText)
  sleep(1)
end
