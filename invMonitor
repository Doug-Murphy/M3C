function __genOrderedIndex( t )
    local orderedIndex = {}
    for key in pairs(t) do
        table.insert( orderedIndex, key )
    end
    table.sort( orderedIndex )
    return orderedIndex
end

function orderedNext(t, state)
    -- Equivalent of the next function, but returns the keys in the alphabetic
    -- order. We use a temporary ordered key table that is stored in the
    -- table being iterated.

    local key = nil
    --print("orderedNext: state = "..tostring(state) )
    if state == nil then
        -- the first time, generate the index
        t.__orderedIndex = __genOrderedIndex( t )
        key = t.__orderedIndex[1]
    else
        -- fetch the next value
        for i = 1,table.getn(t.__orderedIndex) do
            if t.__orderedIndex[i] == state then
                key = t.__orderedIndex[i+1]
            end
        end
    end

    if key then
        return key, t[key]
    end

    -- no more value to return, cleanup
    t.__orderedIndex = nil
    return
end

function orderedPairs(t)
    -- Equivalent of the pairs() function on tables. Allows to iterate
    -- in order
    return orderedNext, t, nil
end

local chest = peripheral.wrap("left")
local monitor = peripheral.wrap("right")
 
monitor.setTextColor(1)
term.redirect(monitor)
 
while true do
  term.clear()
  term.setCursorPos(1.0, 1.0)
  chest.condenseItems()
 
  local contents = chest.getAllStacks(false)
  local contentsHash = {}
  for index,item in pairs(contents) do
    if (contentsHash[item.display_name] == nil) then
      contentsHash[item.display_name] = 0
    end
 
    contentsHash[item.display_name] = contentsHash[item.display_name] + item.qty
  end
 
  for key,value in orderedPairs(contentsHash) do
    print(key .. " - " .. value)
  end
 
  sleep(30)
end
